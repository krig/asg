#!/usr/bin/env python
"""asg

Usage:
  asg [-v] [--output=<dir>]
      [--serve|--watch] [--port=<port>]
      [<config>]

Options:
  -h --help          Show this screen.
  --version          Show version.
  -v --verbose       Print debug output.
  -o --output=<dir>  Output directory [default: output/].
  -s --serve         Launch server.
  -w --watch         Launch server, watch content for changes.
  -p --port=<port>   Server port [default: 4763].
"""
from docopt import docopt
import os
import re
import shutil
from dateutil import parser as dateparser
import datetime
import time
import yaml
import jinja2
import logging
from StringIO import StringIO
from asglib.asciidocapi import AsciiDocAPI
import markdown
from collections import defaultdict
FORMAT = '%(levelname)-8s %(asctime)-15s: %(message)s'
logging.basicConfig(format=FORMAT)
log = logging.getLogger(__name__)


def modified(src, dst):
    if src and dst and os.path.exists(src) and os.path.exists(dst):
        return os.path.getmtime(src) > os.path.getmtime(dst)
    return True


def update_file(src, dst):
    if modified(src, dst):
        log.info("+f %s -> %s" % (src, dst))
        shutil.copy2(src, os.path.dirname(dst))
    else:
        log.debug("*f %s -> %s" % (src, dst))


def makedir(tgt):
    if not os.path.isdir(tgt):
        log.info("+d %s" % (tgt))
        try:
            os.makedirs(tgt)
        except OSError:
            pass
    else:
        log.debug("*d %s" % (tgt))


def parse_date(d):
    dt = dateparser.parse(d)
    return (dt - datetime.datetime(1970, 1, 1)).total_seconds()


def format_date(ts):
    ltime = time.localtime(ts)
    return time.strftime("%Y-%m-%d %H:%M", ltime)


def is_newer(item_a, item_b):
    if item_b is None:
        return True
    return parse_date(item_a['date']) > parse_date(item_b['date'])


class Asg(object):
    def __init__(self, args, config):
        self._md = markdown.Markdown(extensions=['sane_lists', 'smarty'], output_format='html5')
        self._asciidoc = AsciiDocAPI()
        self.newest_parsed_mtime = 0  # in seconds

        self.parsers = {
            'markdown': self.parse_markdown,
            'asciidoc': self.parse_asciidoc,
            'template': self.parse_template
        }
        self.filetypes = {
            '.md': 'markdown',
            '.txt': 'asciidoc',
            '.html': 'template',
            '.xml': 'template'
        }
        self.categories = []
        self.tags = []

        self.args = args
        for key, value in config.iteritems():
            if key == 'filetypes':
                for ft, tgt in value.iteritems():
                    if tgt not in self.parsers:
                        raise ValueError("Unknown parsers for %s: %s" % (ft, tgt))
                    self.filetypes[ft] = tgt
            setattr(self, key, value)
        self.output = args['--output']
        self.url = getattr(self, 'url', 'http://localhost:%s' % (self.args['--port']))
        if self.url[-1] != '/':
            self.url += '/'

        self.source_items = []
        self.meta_items = []
        if not hasattr(self, 'layouts'):
            self.layouts = ['layouts/']
        self.loader = jinja2.FileSystemLoader(self.layouts)
        self.env = jinja2.Environment(loader=self.loader)
        self._asciidoc.options('--no-header-footer')
        self._asciidoc.options('--verbose')
        if isinstance(self.author, unicode):
            self._asciidoc.attributes['author'] = self.author.encode('utf-8')
        else:
            self._asciidoc.attributes['author'] = self.author

    def build(self):
        makedir(self.output)

        for thing in self.static:
            self.copy_static(thing)

        for thing in self.content:
            self.parse_content(thing)

        self.build_template_input()

        for item in self.source_items:
            self.process_item(item)

        for item in self.meta_items:
            self.process_item(item)

        log.info("categories: " + ', '.join(self.categories))
        log.info("tags: " + ', '.join(self.tags))

        if self._data['newest']:
            newest_date = self._data['newest']['date']
        else:
            newest_date = format_date(self.newest_parsed_mtime)
        if self._has_template('_category.html'):
            for category in self.categories:
                item = {'layout': '_category.html',
                        'date': newest_date,
                        'title': category,
                        'content': category,
                        'srcpath': '',
                        'dest': os.path.join(category, 'index.html'),
                        'processor': self.process_template
                        }
                self.process_item(item)

        if self._has_template('_tag.html'):
            for tag in self.tags:
                item = {'layout': '_tag.html',
                        'date': newest_date,
                        'title': tag,
                        'content': tag,
                        'srcpath': '',
                        'dest': os.path.join('tag', tag, 'index.html'),
                        'processor': self.process_template
                        }
                self.process_item(item)

    def _has_template(self, tmpl):
        try:
            t = self.env.get_template(tmpl)
            return t is not None
        except jinja2.TemplateNotFound:
            return False

    def parse_content(self, content):
        if os.path.isdir(content):
            pfxlen = len(content)
            for root, subdirs, files in os.walk(content, followlinks=True):
                tgtdir = root[pfxlen:]
                log.debug("? %s, %s, %s, %s" % (root, tgtdir, subdirs, files))
                for f in files:
                    self.parse_file(os.path.join(root, f),
                                    os.path.join(tgtdir, f))
        else:
            self.parse_file(content, content)

    def _dir(self, path):
        makedir(self._outdir(path))

    def _update(self, src, dst):
        update_file(src, self._outdir(dst))

    def copy_static(self, static):
        if os.path.isdir(static):
            pfxlen = len(static)
            for root, subdirs, files in os.walk(static, followlinks=True):
                tgtdir = root[pfxlen:]
                if tgtdir:
                    self._dir(tgtdir)
                for f in files:
                    self._update(os.path.join(root, f),
                                 os.path.join(tgtdir, f))
        else:
            path, name = os.path.split(static)
            if path:
                self._dir(path)
            self._update(static, static)

    def parse_file(self, srcpath, dstpath):
        log.debug("?f %s -> %s" % (srcpath, dstpath))
        _, ext = os.path.splitext(srcpath)
        if ext not in self.filetypes:
            raise ValueError("No parser for: %s" % (ext))
        log.debug("!p %s :: %s" % (srcpath, self.filetypes[ext]))
        mtime = os.path.getmtime(srcpath)
        if mtime > self.newest_parsed_mtime:
            self.newest_parsed_mtime = mtime
        self.parsers[self.filetypes[ext]](srcpath, dstpath)

    def read_fm(self, path):
        """
        Reads and parses front matter from file in path.
        If there is no front matter, returns {}, <content>
        Else returns frontmatter, <content>
        """
        fm = []
        content = []
        fmdone = False
        with open(path) as f:
            for line in f.readlines():
                while line and line[-1] in ('\n', '\r'):
                    line = line[:-1]
                if not fmdone:
                    if line.strip() == "---":
                        fmdone = True
                    else:
                        fm.append(line.strip())
                else:
                    content.append(line)
        if fmdone:
            return yaml.load('\n'.join(fm)), '\n'.join(content) + '\n'
        else:
            return {}, '\n'.join(fm) + '\n'

    def read_asciidoc_fm(self, path):
        """
        Asciidoc front-matter is of a different format:
        <title>
        =======
        :<key>: <value>

        until a blank line

        Not exactly true, but...
        """
        fm = []
        content = []
        fmdone = False
        with open(path) as f:
            for line in f.readlines():
                while line and line[-1] in ('\n', '\r'):
                    line = line[:-1]
                content.append(line)
                if not fmdone:
                    if line.strip() == "":
                        fmdone = True
                    else:
                        fm.append(line.strip())
        if fmdone:
            ret = {}
            ret['title'] = fm[0].strip()
            if set(fm[1].strip()) != set('='):
                raise ValueError("Document has no title: %s" % (path))
            for line in fm[2:]:
                m = re.match(r"^:(.+):(.+)$", line)
                if not m:
                    raise ValueError("Unexpected %s" % (line))
                ret[m.group(1).lower()] = m.group(2).strip()
            return ret, '\n'.join(content) + '\n'
        else:
            return {}, '\n'.join(content) + '\n'

    def _site(self):
        return {
            'title': getattr(self, 'title', 'Site'),
            'lang': getattr(self, 'lang', 'en'),
            'charset': getattr(self, 'charset', 'utf-8'),
            'url': getattr(self, 'url', 'http://localhost:%s' % (self.args['--port'])),
            'author': getattr(self, 'author', ''),
            'email': getattr(self, 'email', ''),
            'description': getattr(self, 'description', ''),
            'uuid': getattr(self, 'uuid', getattr(self, 'title', 'Site')),
            'favicon': getattr(self, 'favicon', '/favicon.ico'),
            'feedurl': getattr(self, 'feedurl', '/atom.xml'),
            'feedtype': getattr(self, 'feedtype', 'application/atom+xml')
        }

    def build_template_input(self):
        self._data = {}
        self._data['site'] = self._site()
        self._data['stylesheets'] = self.stylesheets
        self._data['pages'] = []
        self._data['newest'] = None
        self._data['categories'] = defaultdict(list)
        self._data['tags'] = defaultdict(list)
        for item in self.source_items:
            self._data['pages'].append(item)
            for c in item.get('categories', []):
                self._data['categories'][c].append(item)
            for c in item.get('tags', []):
                self._data['tags'][c].append(item)
            if is_newer(item, self._data['newest']):
                self._data['newest'] = item

    def _make_slug(self, srcpath, frontmatter, dstpath):
        "returns slug, dest"
        log.debug("make_slug: %s, %s, %s" % (srcpath, frontmatter, dstpath))
        slug, dest = frontmatter.get('slug'), frontmatter.get('url')
        if not slug:
            slug = os.path.splitext(dstpath)[0].replace(' ', '_')
        if not dest:
            dest = os.path.splitext(dstpath)[0] + '/index.html'
        log.debug("slug, dest: %s, %s" % (slug, dest))
        return slug, dest

    def _make_categories_and_tags(self, dstpath, frontmatter):
        "calculate categories for content"
        c = set(*frontmatter.get('categories', []))
        for cat in os.path.dirname(dstpath).split('/'):
            if cat:
                c.add(cat)
        for cat in c:
            if cat not in self.categories:
                self.categories.append(cat)
        frontmatter['categories'] = list(c)

        tags = frontmatter.get('tags', [])
        for tag in tags:
            if tag not in self.tags:
                self.tags.append(tag)
        frontmatter['tags'] = tags

    def parse_generic(self, srcpath, dstpath, read, process, append):
        fm, content = read(srcpath)
        slug, dest = self._make_slug(srcpath, fm, dstpath)
        self._make_categories_and_tags(dstpath, fm)
        if 'date' in fm:
            fm['date'] = fm['date']
        else:
            mtime = os.path.getmtime(srcpath)
            fm['date'] = format_date(mtime)
        fm['slug'] = slug
        fm['dest'] = dest
        fm['content'] = content
        fm['srcpath'] = srcpath
        fm['dstpath'] = dstpath
        fm['url'] = self.url + fm.get('url', fm['slug'])
        fm['processor'] = process
        append(fm)

    def parse_markdown(self, srcpath, dstpath):
        self.parse_generic(srcpath, dstpath,
                           self.read_fm,
                           self.process_markdown,
                           lambda fm: self.source_items.append(fm))

    def parse_asciidoc(self, srcpath, dstpath):
        self.parse_generic(srcpath, dstpath,
                           self.read_asciidoc_fm,
                           self.process_asciidoc,
                           lambda fm: self.source_items.append(fm))

    def parse_template(self, srcpath, dstpath):
        self.parse_generic(srcpath, dstpath,
                           self.read_fm,
                           self.process_template,
                           lambda fm: self.meta_items.append(fm))

    def process_item(self, item):
        template = self.env.get_template(item.get('layout', '_default.html'))
        postdata = self._data.copy()
        postdata['page'] = item.copy()
        postdata['page']['content'] = ''
        template2 = jinja2.Template(item['content'])
        untemplated = template2.render(postdata)
        processed = item['processor'](untemplated)
        postdata['page']['content'] = processed
        result = template.render(postdata)
        item['content'] = processed
        self._dir(os.path.dirname(item['dest']))
        srcpath = item['srcpath']
        outpath = self._outdir(item['dest'])
        if not srcpath:
            if os.path.isfile(outpath):
                if open(outpath).read() == result.encode('utf-8'):
                    log.debug("*f: %s -> %s" % (item['title'], outpath))
                    return
        elif not modified(srcpath, outpath):
            log.debug("*f: %s -> %s" % (srcpath, outpath))
            return
        log.info("+f: %s -> %s" % (srcpath or item['title'], outpath))
        with open(outpath, 'w') as dest:
            dest.write(result.encode('utf-8'))

    def process_markdown(self, content):
        return self._md.convert(content)

    def process_asciidoc(self, content):
        infile = StringIO(content.encode('utf-8'))
        outfile = StringIO()
        self._asciidoc.execute(infile, outfile, backend='html5')
        return outfile.getvalue()

    def process_template(self, content):
        return content

    def _outdir(self, path):
        if path and path[0] == '/':
            return os.path.join(self.output, path[1:])
        return os.path.join(self.output, path)


def main(args):
    if args['<config>'] is None:
        args['<config>'] = './config.yaml'
    if args['--verbose']:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)
    log.debug("%s" % ', '.join('%s=%s' % (k, v) for k, v in args.iteritems()))
    config = yaml.load(open(args['<config>']))
    asg = Asg(args, config)
    asg.build()
    if args['--serve']:
        import SimpleHTTPServer
        import SocketServer
        os.chdir(args['--output'])
        PORT = int(args['--port'])
        print "Serving on 0.0.0.0:%s" % (PORT)
        handler = SimpleHTTPServer.SimpleHTTPRequestHandler
        httpd = SocketServer.TCPServer(("", PORT), handler)
        httpd.serve_forever()

if __name__ == "__main__":
    args = docopt(__doc__, version="asg 0.1")
    main(args)
